different_country
dirty_gap[dirty_gap$country != gapminder$country, ]
gapminder[dirty_gap$country != gapminder$country, ]
dirty_gap <- dirty_gap %>%
separate(region, into = c("continent", "country"), sep = "_") %>%
select(country, continent, year, lifeExp, pop, gdpPercap) %>%
mutate(country = str_replace(country,
"Democratic Republic of the Congo",
"Congo, Dem. Rep."),
country = str_replace(country,
"Congo, Democratic Republic",
"Congo, Dem. Rep."),
country = str_replace(country,
"china",
"China"),
country = str_replace(country,
"Colombia    ",
"Colombia"),
country = str_replace(country,
"Central african republic",
"Central African Republic"),
contry = str_replace(country,
"Cote d'Ivore",
"Cote d'Ivoire"),
continent = if_else(continent == "",
"Americas",
continent),
continent = if_else(continent == "    Asia",
"Asia",
continent))
dirty_gap <- dirty_gap %>%
separate(region, into = c("continent", "country"), sep = "_") %>%
select(country, continent, year, lifeExp, pop, gdpPercap) %>%
mutate(country = str_replace(country,
"Democratic Republic of the Congo",
"Congo, Dem. Rep."),
country = str_replace(country,
"Congo, Democratic Republic",
"Congo, Dem. Rep."),
country = str_replace(country,
"china",
"China"),
country = str_replace(country,
"Colombia    ",
"Colombia"),
country = str_replace(country,
"Central african republic",
"Central African Republic"),
contry = str_replace(country,
"Cote d'Ivore",
"Cote d'Ivoire"),
continent = if_else(continent == "",
"Americas",
continent),
continent = if_else(continent == "    Asia",
"Asia",
continent))
# your answer here
url <- 'https://github.com/STAT545-UBC/STAT545-UBC.github.io/blob/master/gapminderDataFiveYear_dirty.txt?raw=true'
download.file(url,"temp.txt")
download.file(url,"temp.txt")
dirty_gap <- read_delim("temp.txt", delim = "\t", col_names = TRUE)
dirty_gap <- dirty_gap %>%
separate(region, into = c("continent", "country"), sep = "_") %>%
select(country, continent, year, lifeExp, pop, gdpPercap) %>%
mutate(country = str_replace(country,
"Democratic Republic of the Congo",
"Congo, Dem. Rep."),
country = str_replace(country,
"Congo, Democratic Republic",
"Congo, Dem. Rep."),
country = str_replace(country,
"china",
"China"),
country = str_replace(country,
"Colombia    ",
"Colombia"),
country = str_replace(country,
"Central african republic",
"Central African Republic"),
contry = str_replace(country,
"Cote d'Ivore",
"Cote d'Ivoire"),
continent = if_else(continent == "",
"Americas",
continent),
continent = if_else(continent == "    Asia",
"Asia",
continent))
dirty_gap[dirty_gap$country != gapminder$country, ]
gapminder[dirty_gap$country != gapminder$country, ]
dirty_gap[dirty_gap$country != gapminder$country, ]
# your answer here
url <- 'https://github.com/STAT545-UBC/STAT545-UBC.github.io/blob/master/gapminderDataFiveYear_dirty.txt?raw=true'
download.file(url,"temp.txt")
download.file(url,"temp.txt")
dirty_gap <- read_delim("temp.txt", delim = "\t", col_names = TRUE)
dirty_gap <- dirty_gap %>%
separate(region, into = c("continent", "country"), sep = "_") %>%
select(country, continent, year, lifeExp, pop, gdpPercap) %>%
mutate(country = str_replace(country,
"Democratic Republic of the Congo",
"Congo, Dem. Rep."),
country = str_replace(country,
"Congo, Democratic Republic",
"Congo, Dem. Rep."),
country = str_replace(country,
"china",
"China"),
country = str_replace(country,
"Colombia    ",
"Colombia"),
country = str_replace(country,
"Central african republic",
"Central African Republic"),
contry = str_replace(country,
"Cote d\'Ivore",
"Cote d\'Ivoire"),
continent = if_else(continent == "",
"Americas",
continent),
continent = if_else(continent == "    Asia",
"Asia",
continent))
dirty_gap[dirty_gap$country != gapminder$country, ]
dirty_gap <- dirty_gap %>%
separate(region, into = c("continent", "country"), sep = "_") %>%
select(country, continent, year, lifeExp, pop, gdpPercap) %>%
mutate(country = str_replace(country,
"Democratic Republic of the Congo",
"Congo, Dem. Rep."),
country = str_replace(country,
"Congo, Democratic Republic",
"Congo, Dem. Rep."),
country = str_replace(country,
"china",
"China"),
country = str_replace(country,
"Colombia    ",
"Colombia"),
country = str_replace(country,
"Central african republic",
"Central African Republic"),
contry = str_replace(country,
"Cote d'Ivore",
"Cote d'Ivoire"),
continent = if_else(continent == "",
"Americas",
continent),
continent = if_else(continent == "    Asia",
"Asia",
continent))
dirty_gap[dirty_gap$country != gapminder$country]
dirty_gap[dirty_gap$country != gapminder$country]
dirty_gap[dirty_gap$country != gapminder$country]
# your answer here
url <- 'https://github.com/STAT545-UBC/STAT545-UBC.github.io/blob/master/gapminderDataFiveYear_dirty.txt?raw=true'
download.file(url,"temp.txt")
dirty_gap <- read_delim("temp.txt", delim = "\t", col_names = TRUE)
dirty_gap <- dirty_gap %>%
separate(region, into = c("continent", "country"), sep = "_") %>%
select(country, continent, year, lifeExp, pop, gdpPercap) %>%
mutate(country = str_replace(country,
"Democratic Republic of the Congo",
"Congo, Dem. Rep."),
country = str_replace(country,
"Congo, Democratic Republic",
"Congo, Dem. Rep."),
country = str_replace(country,
"china",
"China"),
country = str_replace(country,
"Colombia    ",
"Colombia"),
country = str_replace(country,
"Central african republic",
"Central African Republic"),
contry = str_replace(country,
"Cote d'Ivore",
"Cote d'Ivoire"),
continent = if_else(continent == "",
"Americas",
continent),
continent = if_else(continent == "    Asia",
"Asia",
continent))
dirty_gap[dirty_gap$country != gapminder$country]
dirty_gap[dirty_gap$country != gapminder$country,]
# your answer here
url <- 'https://github.com/STAT545-UBC/STAT545-UBC.github.io/blob/master/gapminderDataFiveYear_dirty.txt?raw=true'
download.file(url,"temp.txt")
download.file(url,"temp.txt")
dirty_gap <- read_delim("temp.txt", delim = "\t", col_names = TRUE)
dirty_gap <- read_delim("temp.txt", delim = "\t", col_names = TRUE)
dirty_gap <- dirty_gap %>%
separate(region, into = c("continent", "country"), sep = "_") %>%
select(country, continent, year, lifeExp, pop, gdpPercap) %>%
mutate(country = str_replace(country,
"Democratic Republic of the Congo",
"Congo, Dem. Rep."),
country = str_replace(country,
"Congo, Democratic Republic",
"Congo, Dem. Rep."),
country = str_replace(country,
"china",
"China"),
country = str_replace(country,
"Colombia    ",
"Colombia"),
country = str_replace(country,
"Central african republic",
"Central African Republic"),
country = str_replace(country,
"Cote d'Ivore",
"Cote d'Ivoire"),
continent = if_else(continent == "",
"Americas",
continent),
continent = if_else(continent == "    Asia",
"Asia",
continent))
dirty_gap[dirty_gap$country != gapminder$country]
dirty_gap[dirty_gap$country != gapminder$country,]
# your answer here
url <- 'https://github.com/STAT545-UBC/STAT545-UBC.github.io/blob/master/gapminderDataFiveYear_dirty.txt?raw=true'
download.file(url,"temp.txt")
dirty_gap <- read_delim("temp.txt", delim = "\t", col_names = TRUE)
dirty_gap <- dirty_gap %>%
separate(region, into = c("continent", "country"), sep = "_") %>%
select(country, continent, year, lifeExp, pop, gdpPercap) %>%
mutate(country = str_replace(country,
"Democratic Republic of the Congo",
"Congo, Dem. Rep."),
country = str_replace(country,
"Congo, Democratic Republic",
"Congo, Dem. Rep."),
country = str_replace(country,
"china",
"China"),
country = str_replace(country,
"Colombia    ",
"Colombia"),
country = str_replace(country,
"Central african republic",
"Central African Republic"),
country = str_replace(country,
"Cote d'Ivore",
"Cote d'Ivoire"),
continent = if_else(continent == "",
"Americas",
continent),
continent = if_else(continent == "    Asia",
"Asia",
continent)) %>%
mutate(pop = as.integer(pop),
year = as.integer(year),
country = as.factor(country),
continent = as.factor(continent))
gapminder <- as.data.frame(gapminder)
dirty_gap <- as.data.frame(dirty_gap)
test_that("They should be all equal!", {
expect_equal(gapminder, dirty_gap)
})
head(planes)
# your answer here
planes %>%
group_by(engine) %>%
summarise(avg_seats = mean(seats),
count = n()) %>%
head()
# your answer here
head(flights)
flights %>%
mutate(distance_km = distance * 1.66,
air_time_hour = air_time / 60,
rm.na = TRUE) %>%
mutate(speed = distance_km / air_time_hour) %>%
group_by(carrier) %>%
summarise(avg_speed = mean(speed),
avg_distance = mean(distance_km)) %>%
head()
flights %>%
drop_na(distance, air_time) %>%
mutate(distance_km = distance * 1.66,
air_time_hour = air_time / 60,
rm.na = TRUE) %>%
mutate(speed = distance_km / air_time_hour) %>%
group_by(carrier) %>%
summarise(avg_speed = mean(speed),
avg_distance = mean(distance_km)) %>%
head()
# your answer here
head(weather)
flights %>%
drop_na(distance, air_time) %>%
mutate(distance_km = distance * 1.66,
air_time_hour = air_time / 60,
rm.na = TRUE) %>%
mutate(speed = distance_km / air_time_hour) %>%
group_by(carrier) %>%
summarise(avg_speed = mean(speed),
avg_distance = mean(distance_km)) %>%
arrange(avg_speed) %>%
head()
flights %>%
drop_na(air_time) %>%
mutate(distance_km = distance * 1.66,
air_time_hour = air_time / 60,
rm.na = TRUE) %>%
mutate(speed = distance_km / air_time_hour) %>%
group_by(carrier) %>%
summarise(avg_speed = mean(speed),
avg_distance = mean(distance_km)) %>%
arrange(avg_speed) %>%
head()
flights %>%
drop_na(air_time) %>%
mutate(distance_km = distance * 1.66,
air_time_hour = air_time / 60,
rm.na = TRUE) %>%
mutate(speed = distance_km / air_time_hour) %>%
group_by(carrier) %>%
summarise(avg_speed = mean(speed),
avg_distance = mean(distance_km)) %>%
arrange(avg_speed) %>%
tail()
flights %>%
drop_na(air_time) %>%
mutate(distance_km = distance * 1.66,
air_time_hour = air_time / 60,
rm.na = TRUE) %>%
mutate(speed = distance_km / air_time_hour) %>%
group_by(carrier) %>%
summarise(avg_speed = mean(speed),
avg_distance = mean(distance_km)) %>%
arrange(avg_speed) %>%
nrow()
flights %>%
drop_na(air_time) %>%
mutate(distance_km = distance * 1.66,
air_time_hour = air_time / 60,
rm.na = TRUE) %>%
mutate(speed = distance_km / air_time_hour) %>%
group_by(carrier) %>%
summarise(avg_speed = mean(speed),
avg_distance = mean(distance_km)) %>%
arrange(avg_speed)
# your answer here
head(weather)
weather %>%
filter(origin %in% c("LGA", "JFK", "EWR")) %>%
group_by(origin, month) %>%
summarise(min_temp = min(temp),
max_temp = max(temp),
avg_temp = mean(temp))
weather %>%
filter(origin %in% c("LGA", "JFK", "EWR")) %>%
drop_na(temp) %>%
group_by(origin, month) %>%
summarise(min_temp = min(temp),
max_temp = max(temp),
avg_temp = mean(temp))
library(tidyverse)
footballer <- tibble::tribble(
~name,        ~position, ~European,    ~team,
"L. Messi",       "winger",     FALSE,  "Barcelona",
"C. Ronaldo",      "forward",     TRUE,   "Juventus",
"V. Van Dijk", "central back", TRUE,   "Liverpool",
"R. Levandowski", "forward",       TRUE,    "Bayern Munich",
"Neymar da Silva", "winger",        FALSE,  "Paris Saint Germain",
"Paul Pogba",      "midfield",     TRUE,     "Manchester United",
"Luis Suarez",    "forward",     FALSE,     "Barcelona",
"Marcelo Vieira",  "full back",  FALSE,      "Real Madrid",
"A. Sanchez",      "winger",     FALSE,     "Inter"
)
decent_teams <- tibble::tribble(
~team,                 ~league,      ~country,
"Barcelona",                 "La Liga",     "Spain",
"Liverpool",             "Premier League",   "England",
"Juvantus",                 "Serie A",          "Italy",
"Paris Saint Germain",      "Ligue 1",         "France",
"Bayern Munich",            "Bundesliga",      "Germany",
"Real Madrid",              "La Liga",         "Spain"
)
footballer
decent_teams
x = footballer
footballer
footballer <- tibble::tribble(
~name,        ~position, ~European,    ~team,
"L. Messi",       "winger",     FALSE,  "Barcelona",
"C. Ronaldo",      "forward",     TRUE,   "Juventus",
"V. Van Dijk", "centre back", TRUE,   "Liverpool",
"R. Levandowski", "forward",       TRUE,    "Bayern Munich",
"Neymar da Silva", "winger",        FALSE,  "Paris Saint Germain",
"Paul Pogba",      "midfield",     TRUE,     "Manchester United",
"Luis Suarez",    "forward",     FALSE,     "Barcelona",
"Marcelo Vieira",  "left full back",  FALSE,      "Real Madrid",
"A. Sanchez",      "winger",     FALSE,     "Inter"
)
footballer
ijfd
ijfd <- inner_join(footballer, decent_teams)
ijfd
decent_teams <- tibble::tribble(
~team,                 ~league,      ~country,
"Barcelona",                 "La Liga",     "Spain",
"Liverpool",             "Premier League",   "England",
"Juventus",                 "Serie A",          "Italy",
"Paris Saint Germain",      "Ligue 1",         "France",
"Bayern Munich",            "Bundesliga",      "Germany",
"Real Madrid",              "La Liga",         "Spain"
)
x = footballer
ijfd <- inner_join(footballer, decent_teams)
ijfd
sjfd <- semi_join(footballer, decent_teams)
sjfd
ljfd <- left_join(footballer, decent_teams)
ljfd
ljfd
ajfd <- anti_join(footballer, decent_teams)
ajfd
ijfd_2 <- inner_join(decent_teams, footballer)
ijfd_2
footballer <- tibble::tribble(
~name,        ~position, ~European,    ~team,
"L. Messi",       "winger",     FALSE,  "Barcelona",
"C. Ronaldo",      "forward",     TRUE,   "Juventus",
"V. Van Dijk", "centre back", TRUE,   "Liverpool",
"R. Levandowski", "forward",       TRUE,    "Bayern Munich",
"Neymar da Silva", "winger",        FALSE,  "Paris Saint Germain",
"Paul Pogba",      "midfield",     TRUE,     "Manchester United",
"Luis Suarez",    "forward",     FALSE,     "Barcelona",
"Marcelo Vieira",  "left full back",  FALSE,      "Real Madrid",
"A. Sanchez",      "winger",     FALSE,     "Inter"
)
decent_teams <- tibble::tribble(
~team,                 ~league,      ~country,
"Barcelona",                 "La Liga",     "Spain",
"Liverpool",             "Premier League",   "England",
"Juventus",                 "Serie A",          "Italy",
"Paris Saint Germain",      "Ligue 1",         "France",
"Bayern Munich",            "Bundesliga",      "Germany",
"Real Madrid",              "La Liga",         "Spain",
"Manchester City",          "Premier League",   "England"
)
ijfd <- inner_join(footballer, decent_teams)
ijfd
sjfd <- semi_join(footballer, decent_teams)
sjfd
ljfd <- left_join(footballer, decent_teams)
ljfd
rjfd <- right_join(footballer, decent_teams)
rjfd
ajfd <- anti_join(footballer, decent_teams)
ajfd
ijfd_2 <- inner_join(decent_teams, footballer)
ijfd_2
fjfd <- full_join(footballer, decent_teams)
fjfd
ijfd <- inner_join(footballer, decent_teams, by = "team")
ijfd
library(tidyverse)
footballer <- tibble::tribble(
~name,        ~position, ~European,    ~team,
"L. Messi",       "winger",     FALSE,  "Barcelona",
"C. Ronaldo",      "forward",     TRUE,   "Juventus",
"V. Van Dijk", "centre back", TRUE,   "Liverpool",
"R. Levandowski", "forward",       TRUE,    "Bayern Munich",
"Neymar da Silva", "winger",        FALSE,  "Paris Saint Germain",
"Paul Pogba",      "midfield",     TRUE,     "Manchester United",
"Luis Suarez",    "forward",     FALSE,     "Barcelona",
"Marcelo Vieira",  "left full back",  FALSE,      "Real Madrid",
"A. Sanchez",      "winger",     FALSE,     "Inter"
)
decent_teams <- tibble::tribble(
~team,                 ~league,      ~country,
"Barcelona",                 "La Liga",     "Spain",
"Liverpool",             "Premier League",   "England",
"Juventus",                 "Serie A",          "Italy",
"Paris Saint Germain",      "Ligue 1",         "France",
"Bayern Munich",            "Bundesliga",      "Germany",
"Real Madrid",              "La Liga",         "Spain",
"Manchester City",          "Premier League",   "England"
)
ijfd <- inner_join(footballer, decent_teams, by = "team")
ijfd
sjfd <- semi_join(footballer, decent_teams, by = "team")
sjfd
ljfd <- left_join(footballer, decent_teams, by = "team")
ljfd
rjfd <- right_join(footballer, decent_teams, by = "team")
rjfd
ajfd <- anti_join(footballer, decent_teams, by = "team")
ajfd
ijfd_2 <- inner_join(decent_teams, footballer, by = "team")
ijfd_2
fjfd <- full_join(footballer, decent_teams, by = "team")
fjfd
groupby_1_stat_2(gapminder, continent, lifeExp, mean)
groupby_1_stat_2 <- function(data, col_1, col_2, fun) {
data %>%
drop_na({{col_1}}, {{col_2}}) %>%
group_by({{col_1}}) %>%
summarise(stat = fun({{col_2}}))
}
groupby_1_stat_2(gapminder, continent, lifeExp, mean)
groupby_1_stat_2(gapminder, continent, lifeExp, max)
groupby_1_stat_2(gapminder, continent, pop, mean)
groupby_1_stat_2(gapminder, year, pop, mean)
setwd("~/Documents/COLX_585/project/financial_analysis")
